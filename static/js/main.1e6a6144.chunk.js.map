{"version":3,"sources":["serviceWorker.js","components/ImageList/ImageList.js","components/ImageSearch/ImageSearch.js","components/App/App.js","components/ImageView/ImageView.js","components/AppRouter.js","index.js"],"names":["Boolean","window","location","hostname","match","ImageList","images","className","map","image","key","id","style","marginBottom","src","largeImageURL","alt","tags","to","pathname","state","ImageSearch","handleMakeRequest","onSubmit","autoComplete","name","type","placeholder","API_KEY","App","error","e","a","preventDefault","searchValue","target","elements","value","fetch","request","json","results","setState","hits","this","React","Component","ImageView","props","owner","user","pageURL","href","AppRouter","exact","path","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"0RAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,yFCiBSC,G,MA9BG,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAEnB,OAEE,yBAAKC,UAAU,aACb,yBAAKA,UAAU,OACXD,EAAOE,KAAI,SAAAC,GACX,OACE,yBAAKC,IAAKD,EAAME,GAAIJ,UAAU,WAAWK,MAAO,CAAEC,aAAa,SAC7D,yBAAKN,UAAU,wBACb,yBAAKA,UAAU,mBAAmBO,IAAKL,EAAMM,cAAeC,IAAKP,EAAMQ,QAEzE,yBAAKV,UAAU,kBACb,kBAAC,IAAD,CAAMW,GAAI,CACNC,SAAS,UAAD,OAAYV,EAAME,IAC1BS,MAAO,CAAEX,WAEX,kDCLHY,G,MAZK,SAAC,GAAD,IAAEC,EAAF,EAAEA,kBAAF,OAElB,yBAAKf,UAAU,eACd,oDACC,0BAAMgB,SAAUD,EAAmBf,UAAU,qBAC3C,2BAAOiB,aAAa,MAAMC,KAAK,cAAcC,KAAK,OAAOC,YAAY,yBACrE,8CCHAC,G,MAAU,sCA+CDC,E,2MA5CbT,MAAQ,CACNd,OAAQ,GACRwB,MAAO,M,EAMTR,kB,uCAAoB,WAAOS,GAAP,mBAAAC,EAAA,6DAClBD,EAAEE,iBAEIC,EAAcH,EAAEI,OAAOC,SAASF,YAAYG,MAHhC,SAIIC,MAAM,gCAAD,OAAiCV,EAAjC,cAA8CM,EAA9C,iBAJT,cAIZK,EAJY,gBAKIA,EAAQC,OALZ,OAKZC,EALY,OAQjBP,EAIC,EAAKQ,SAAS,CACZpC,OAAQmC,EAAQE,KAAMb,MAAO,OALlB,EAAKY,SAAS,CACzBZ,MAAO,4BATO,2C,8HAoBlB,OAEE,6BACE,kBAAC,EAAD,CAAaR,kBAAmBsB,KAAKtB,oBAEd,OAArBsB,KAAKxB,MAAMU,MACX,yBAAKvB,UAAU,SAAUqC,KAAKxB,MAAMU,OACpC,kBAAC,EAAD,CAAWxB,OAAQsC,KAAKxB,MAAMd,c,GApCtBuC,IAAMC,WCoBTC,G,MAxBG,SAACC,GAAW,IAAD,EAEkCA,EAAM9C,SAASkB,MAAMX,MAA3DA,EAFI,EAEnBM,cAA4BkC,EAFT,EAEGC,KAAajC,EAFhB,EAEgBA,KAAMkC,EAFtB,EAEsBA,QAGjD,OAEM,yBAAK5C,UAAU,iBACb,6BACE,yBAAKO,IAAKL,EAAOO,IAAKC,EAAMV,UAAU,mBACtC,6BACE,4CAGJ,yBAAKA,UAAU,YACb,sCAAW,8BAAO0C,IAClB,4BAAI,8BAAM,uBAAGd,OAAO,SAASiB,KAAMD,GAAzB,mBACR,kBAAC,IAAD,CAAM5C,UAAU,WAAWW,GAAG,KAA9B,YCRCmC,EATG,kBAChB,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW3B,IACjC,kBAAC,IAAD,CAAO0B,KAAK,aAAaC,UAAWT,OCH1CU,IAASC,OAAO,kBAAC,EAAD,MAAeC,SAASC,eAAe,SN4HjD,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAArC,GACLsC,QAAQtC,MAAMA,EAAMuC,c","file":"static/js/main.1e6a6144.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\"\nimport { Link } from \"react-router-dom\"\n\nimport \"./ImageList.css\"\n\nconst ImageList = ({ images }) => {\n\n  return (\n\n    <div className=\"container\">\n      <div className=\"row\">\n        { images.map(image => {\n          return (\n            <div key={image.id} className=\"col-md-4\" style={{ marginBottom:\"2rem\" }}>\n              <div className=\"imageList__container\">\n                <img className=\"imageList__image\" src={image.largeImageURL} alt={image.tags} />\n              </div>\n              <div className=\"image__details\">\n                <Link to={{ \n                    pathname: `/image/${image.id}`,\n                    state: { image }\n                  }}>\n                  <button>View</button>\n                </Link>\n              </div>\n            </div>\n          )\n        }) }\n      </div>\n    </div>\n\n  )\n  \n}\n\nexport default ImageList","import React from \"react\"\nimport \"./ImageSearch.css\"\n\n\n\nconst ImageSearch = ({handleMakeRequest}) => (\n\n  <div className=\"imageSearch\">\n   <h1>Pixabay fetching app</h1>\n    <form onSubmit={handleMakeRequest} className=\"imageSearch__form\">\n      <input autoComplete=\"off\" name=\"searchValue\" type=\"text\" placeholder=\"search for images...\"/>\n      <button>Search</button>\n    </form>\n  </div>\n\n)\n\nexport default ImageSearch","import React from \"react\"\n\nimport ImageList from \"../ImageList/ImageList\"\nimport ImageSearch from \"../ImageSearch/ImageSearch\"\nimport \"./App.css\"\n\n\n\nconst API_KEY = \"15529781-dacf89feac40bc7ef21d23a77\"\n\nclass App extends React.Component {\n  state = {\n    images: [],\n    error: null\n  }\n\n\n\n  //Making search request\n  handleMakeRequest = async (e) => {\n    e.preventDefault()\n\n    const searchValue = e.target.elements.searchValue.value\n    const request = await fetch(`https://pixabay.com/api/?key=${API_KEY}&q=${searchValue}&per_page=21`)\n    const results = await request.json()\n  \n\n    !searchValue ? this.setState({ \n        error: \"Please provide a value.\" \n      })\n    :\n      this.setState({ \n        images: results.hits, error: null \n      })\n    \n  }\n\n  render() {\n\n    return (\n\n      <div>\n        <ImageSearch handleMakeRequest={this.handleMakeRequest} />\n        { \n          this.state.error !== null ? \n          <div className=\"error\">{ this.state.error }</div> : \n          <ImageList images={this.state.images} /> \n        }\n      </div>\n\n    )\n\n  }\n}\n\nexport default App","import React from \"react\"\nimport { Link } from \"react-router-dom\"\nimport \"./ImageView.css\"\n\n\n\nconst ImageView = (props) => {\n  \n  const { largeImageURL: image, user: owner, tags, pageURL } = props.location.state.image\n\n\n  return (\n    \n        <div className=\"img-container\">\n          <div>\n            <img src={image} alt={tags} className=\"imageView__img\" />\n            <div>\n              <p>&copy;pixabay</p>\n            </div>\n          </div>\n          <div className=\"img-info\">\n            <h4>Owner: <span>{owner}</span></h4>\n            <h4><span><a target=\"_blank\" href={pageURL}>Original page</a></span></h4>\n              <Link className=\"home-btn\" to=\"/\">Home</Link>\n          </div>\n        </div>\n\n  )\n}\n\nexport default ImageView","import React from 'react'\nimport { HashRouter, Switch, Route } from \"react-router-dom\"\n\nimport App from \"./App/App\"\nimport ImageView from \"./ImageView/ImageView\"\n\nconst AppRouter = () => (\n  <HashRouter>\n    <Switch>\n      <Route exact path=\"/\" component={App} />\n      <Route path=\"/image/:id\" component={ImageView} />\n    </Switch>\n  </HashRouter>\n)\n\nexport default AppRouter","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport AppRouter from \"./components/AppRouter\"\n\nReactDOM.render(<AppRouter />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}